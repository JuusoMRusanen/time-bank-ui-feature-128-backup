/* tslint:disable */
/* eslint-disable */
/**
 * Timebank
 * Timebank API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TimeEntry,
    TimeEntryFromJSON,
    TimeEntryToJSON,
} from '../models';

export interface DeleteTimeEntryRequest {
    entryId: string;
}

export interface ListTimeEntriesRequest {
    personId?: number;
    before?: Date;
    after?: Date;
    vacation?: boolean;
}

/**
 * 
 */
export class TimeEntriesApi extends runtime.BaseAPI {

    /**
     * Deletes a time entry.
     * Delete a time entry.
     */
    async deleteTimeEntryRaw(requestParameters: DeleteTimeEntryRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.entryId === null || requestParameters.entryId === undefined) {
            throw new runtime.RequiredError('entryId','Required parameter requestParameters.entryId was null or undefined when calling deleteTimeEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/timeEntries/{entryId}`.replace(`{${"entryId"}}`, encodeURIComponent(String(requestParameters.entryId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a time entry.
     * Delete a time entry.
     */
    async deleteTimeEntry(requestParameters: DeleteTimeEntryRequest): Promise<void> {
        await this.deleteTimeEntryRaw(requestParameters);
    }

    /**
     * Lists time entries.
     * Lists time entries.
     */
    async listTimeEntriesRaw(requestParameters: ListTimeEntriesRequest): Promise<runtime.ApiResponse<Array<TimeEntry>>> {
        const queryParameters: any = {};

        if (requestParameters.personId !== undefined) {
            queryParameters['personId'] = requestParameters.personId;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = (requestParameters.before as any).toISOString().substr(0,10);
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = (requestParameters.after as any).toISOString().substr(0,10);
        }

        if (requestParameters.vacation !== undefined) {
            queryParameters['vacation'] = requestParameters.vacation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/timeEntries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimeEntryFromJSON));
    }

    /**
     * Lists time entries.
     * Lists time entries.
     */
    async listTimeEntries(requestParameters: ListTimeEntriesRequest): Promise<Array<TimeEntry>> {
        const response = await this.listTimeEntriesRaw(requestParameters);
        return await response.value();
    }

}
